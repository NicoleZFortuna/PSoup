[{"path":"https://nicolezfortuna.github.io/PSoup/articles/01_introduction.html","id":"purpose-and-design-philosophy-of-psoup","dir":"Articles","previous_headings":"","what":"Purpose and design philosophy of PSoup","title":"Introduction","text":"PSoup package built tool support generation network descriptions biological systems. embedded larger workflow designed ultimately assist predicting direction change system response perturbations. workflow consists several critical aspects: Describe prior knowledge system series statements. Record starting conditions outcomes experiments. Translate statements diagram. Convert diagram computational model. Test computational model recapitulates experimental outcomes. Design new experiments test predictive power model. PSoup designed automate aspects 3, 4, 5. Therefore, generating models biological system, user needs actively involved collating existing knowledge system, describing said system using standard diagram syntax. diagram produced, PSoup convert diagram mathematical model using set algebraic rules. mathematical model can used simulate system deviates baseline different conditions. benefit PSoup allows users may comfortable mathematics dabble simulations. Even , PSoup completely transparent regard diagrammatic description system translated series equations generating R script defines function (called nextStep) calculates values nodes timestep. allowing access function, PSoup gives possibility user manually change aspects mathematical description system wish . However, given philosophy behind PSoup’s construction, modification actively encouraged. consequence topological approach taken PSoup, style modelling qualitative opposed quantitative. concerned predicting direction change rather amount change. , values nodes normalised expressed relation system baseline (often wild type describing biological systems), expressed value 1. Simulations run system reaches stability, point node interest can checked new value. Given coefficients used style modelling, time information simulations biologically meaningful. information interest value nodes steady state.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/articles/02_walkthrough.html","id":"importing-a-diagram","dir":"Articles","previous_headings":"","what":"Importing a diagram","title":"PSoup Walkthrough","text":"First start building diagram network using editor can support SBGN diagrams Activity Flow language (recommend Newt Pathway Viewer & Editor). building diagram, make sure specify map type AF, use symbols Activity Flow Palette. diagram based series statements constructed describing system. advice construct statements, view ‘Organising Prior Knowledge’ article. detailed description use Newt editor, view ‘Newt Editor Instructions’ article. see algebraic rules PSoup uses convert diagram mathematical model view ‘Algebraic Rules’ article. Figure 1. example network diagram can produced using Newt online editor. happy diagram, click File -> Export -> SBGN-ML Plain. generate text file representation diagram using SBGN markdown language. need use convertSBGNdiagram function translate text file Network object easy use. use convertSBGNdiagram function, need provide two arguments. first file path .sbgn file describes diagram, second argument asks provide name network. trial using function, first use code import native PSoup network. function save DunAFgenotype.sbgn file location choosing. function exists allow user interact sbgn file network displayed . need use function diagram. function generate Diagram folder Desktop within DunAFgenotype.sbgn file saved. Using provided sbgn file, can generate network object demonstrated . Note hormone objects underscore wither ‘R’ ‘S’, indicating compartment diagram (‘Rootstock’ ‘Shoot’ case). network object also natively available PSoup package, can therefore called directly:","code":"# create a folder for the example diagram to be saved in getExampleDiagram(folder = \"~/Desktop/Diagram\") # create a PSoup network object PeaNetwork <- convertSBGNdiagram(file = \"~/Desktop/Diagram/DunAFgenotype.sbgn\",                                   networkName = \"PeaNetwork\") PeaNetwork #> This is an object of class Network. It contains: #> 10 hormones #>  BranchInhibitor_S #>  BranchOutgrowth_S #>  BudRelease_S #>  Cytokinin_R #>  Feedback_R #>  Feedback_S #>  Inhibitor_R #>  ShootDerivedSignal_S #>  Strigolactone_R #>  Strigolactone_S #> 5 genotypes #>  RMS1 #>  RMS2 #>  RMS3 #>  RMS4 #>  RMS5 peaNetwork #> This is an object of class Network. It contains: #> 10 hormones #>  BranchInhibitor_S #>  BranchOutgrowth_S #>  BudRelease_S #>  Cytokinin_R #>  Feedback_R #>  Feedback_S #>  Inhibitor_R #>  ShootDerivedSignal_S #>  Strigolactone_R #>  Strigolactone_S #> 5 genotypes #>  RMS1 #>  RMS2 #>  RMS3 #>  RMS4 #>  RMS5"},{"path":"https://nicolezfortuna.github.io/PSoup/articles/02_walkthrough.html","id":"generating-a-model-from-a-diagram","dir":"Articles","previous_headings":"","what":"Generating a model from a diagram","title":"PSoup Walkthrough","text":"Network objects can passed function called buildModel generate information required create mathematical description network. need provide directory pathway model information stored . folder used define simulations, well hold simulation results. already exists folder specified name, function overwrite folder unless requested (need pass additional argument forceOverwrite = TRUE buildModel function.). Within folder built, three objects. Two objects data frames specifying values fed model: one give genotypes baseline values, second give starting node values simulation. access information, need load files local environment: data frames, row can considered experimental condition simulated. Data frames initially single row long, user can add number rows containing conditions wish test (later). rows can added manually, can automatically generated using purpose built functions: genotypeScreen randomStartScreen. addition two data frames, folder generate also contain script defining function called nextStep. function automatically generated PeaNetwork object based original diagram. Figure 2. nextStep function, automatically generated buildModel function. function work running simulations network, calculates node values step. contains series difference equations (discrete version differential equation) mathematical description information contained diagram. function provided script accessible user order make translation provided diagram transparent user. information nextStep function, view ‘Advanced PSoup’ article (development). three data objects created specified folder, path directory folder can provided input run simulations. want run single simulation, can call simulateNetwork function. notice maxStep argument. exists prevent simulation running indefinitely case model find stable state. simulation also terminate case one nodes runs infinity (Inf). quickly inspect outcome simulation, fastPlot function can called . genotypeDef nodestartDef data frames model folder contain baseline condition, system already stability, therefore plot shows change. Note plot node values log transformed. fastPlot function argument logTransform default set TRUE. transformation makes easier discern releative differences positive negative changes system. like see true node values, set argument FALSE. function useful make quick diagnosis system. make high quality plots, use existing R plotting tools.","code":"# define the location that all simulation material will be saved folder = \"~/Desktop/Model\"  # generate files necessary to run simulations buildModel(network = PeaNetwork, folder = folder, forceOverwrite = TRUE) # To access the genotype definition object load(paste0(folder, \"/genotypeDef.RData\"))  # To access the starting node value definition object load(paste0(folder, \"/nodestartDef.RData\")) genotypeDef #>   RMS1_R RMS1_S RMS5_R RMS5_S RMS3_R RMS3_S RMS4_R RMS4_S RMS2_R RMS2_S #> 1      1      1      1      1      1      1      1      1      1      1  nodestartDef #>   Strigolactone_R Inhibitor_R Feedback_R Cytokinin_R BranchOutgrowth_S #> 1               1           1          1           1                 1 #>   BudRelease_S Strigolactone_S BranchInhibitor_S Feedback_S #> 1            1               1                 1          1 #>   ShootDerivedSignal_S #> 1                    1 simulation <- simulateNetwork(folder, maxStep = 100)  head(simulation) #> $simulation #>   Strigolactone_R Inhibitor_R Feedback_R Cytokinin_R BranchOutgrowth_S #> 2               1           1          1           1                 1 #> 3               1           1          1           1                 1 #>   BudRelease_S Strigolactone_S BranchInhibitor_S Feedback_S #> 2            1               1                 1          1 #> 3            1               1                 1          1 #>   ShootDerivedSignal_S #> 2                    1 #> 3                    1 #>  #> $stable #> [1] TRUE fastPlot(simulation)"},{"path":"https://nicolezfortuna.github.io/PSoup/articles/02_walkthrough.html","id":"simulating-a-set-of-conditions","dir":"Articles","previous_headings":"","what":"Simulating a set of conditions","title":"PSoup Walkthrough","text":"usually case want test network multiple conditions. Sometimes specific conditions want test, times want conduct exhaustive search. either case, need use setupSims function, rather simulateNetwork function. specific conditions want test, can simply add rows respective genotypeDef /nodestartDef object. row considered unique condition simulation. careful maintain original column names generated buildModel function. changed, unable run simulations. code block creates 2nd 3rd row, assigns value 1 available locations. identifying particular location data.frame like genotypeDef object, can use square brackets identify rows columns (frameName[rows, columns]). can use syntax even expand data.frame outside original scope like . start creating mutant conditions, square brackets method can used indicate value changed. Another method specify column want change using frameName$columnName, just indicating row index want change values multiple columns , can use square bracket method , time listing names columns changed. example , second row represents ‘experimental’ condition function RMS2 scion (shoot) knocked . third row represents condition function RMS1 reduced half capacity root, scion. generated specific experimental conditions want test, must save genotypeDef object back model folder. case uncomfortable interacting data frame via R, can export data frame excel. happy conditions want simulate, must convert xlsx file back R data frame, save . Keep mind must modify column names! First, create Excel readable file genotypeDef object order preserve original column names: Excel, add row 1s every condition want test. modify values correspond conditions want test, row representing one ‘experimental condition’. Leave first row 1s. happy simulations want run, save Excel file. need load updated Excel file R, can save R data frame (overwriting original file created buildModel). process can applied files PSoup uses define simulations run. case want exhaustive search specifically knockout mutations, genotypeScreen function useful automating construction appropriate data frames. output function automatically overwrite genotypeDef object folder, need explicitly save genotypeDef object use function. default behaviour function create knockout mutation genes (modifiers) system, one time (regardless appear multiple compartments). genotypeScreen function can generate data frame combinations however many mutations like explore, including genotype expression values like use mutations. case gene attached multiple nodes different compartments, can choose whether differential expression different compartments. default condition graft = FALSE indicates nodes modified gene modified identically. allow differential expression different compartments system, include argument graft = TRUE (eg genotypeScreen(folder, graft = TRUE) ). sister function genotypeScreen randomStartScreen. function generate data frame corresponding nodes network, values indicating value node start simulation. use function, must provide model folder path, well number restart values want generate. addition can also indicate maximum minimum values want nodes. default minimum set 0, default maximum value 2. function pull values uniform distribution bound values. modifierPriorScreen function allows something similar defining modifier values. can learn function ‘Advanced PSoup’ article (development). modifierPriorScreen allows flexibility defining distributions modifier values. functionality designed idea able test robustness network structure included walk .","code":"# add additional rows filled with the baseline value 1 genotypeDef[2:3, ] <- 1 # 2:3 is equivalent to c(2, 3). The empty column space indicates that all columns are selected  genotypeDef #>   RMS1_R RMS1_S RMS5_R RMS5_S RMS3_R RMS3_S RMS4_R RMS4_S RMS2_R RMS2_S #> 1      1      1      1      1      1      1      1      1      1      1 #> 2      1      1      1      1      1      1      1      1      1      1 #> 3      1      1      1      1      1      1      1      1      1      1 # specify mutant conditions in the additional rows genotypeDef[2, 2] <- 0 # changing the value of the 2nd row, 2nd column to 0  genotypeDef #>   RMS1_R RMS1_S RMS5_R RMS5_S RMS3_R RMS3_S RMS4_R RMS4_S RMS2_R RMS2_S #> 1      1      1      1      1      1      1      1      1      1      1 #> 2      1      0      1      1      1      1      1      1      1      1 #> 3      1      1      1      1      1      1      1      1      1      1 # specify mutant conditions in the additional rows genotypeDef$RMS1_R[3] <- 0 # changing the value of the 'RMS1_R' column, 3rd index to 0 genotypeDef$RMS1_S[3] <- 0 # changing the value of the 'RMS1_S' column, 3rd index to 0  genotypeDef #>   RMS1_R RMS1_S RMS5_R RMS5_S RMS3_R RMS3_S RMS4_R RMS4_S RMS2_R RMS2_S #> 1      1      1      1      1      1      1      1      1      1      1 #> 2      1      0      1      1      1      1      1      1      1      1 #> 3      0      0      1      1      1      1      1      1      1      1 # specify mutant conditions in the additional rows genotypeDef[3, c('RMS1_R', 'RMS1_S')] <- 0.5 # changing the value of the 3nd row, 'RMS1_R' and 'RMS1_S' columns to 0.5  genotypeDef #>   RMS1_R RMS1_S RMS5_R RMS5_S RMS3_R RMS3_S RMS4_R RMS4_S RMS2_R RMS2_S #> 1    1.0    1.0      1      1      1      1      1      1      1      1 #> 2    1.0    0.0      1      1      1      1      1      1      1      1 #> 3    0.5    0.5      1      1      1      1      1      1      1      1 # save modified genotypeDef object so that it can be used for simulations save(genotypeDef, file = paste0(folder, \"/genotypeDef.RData\")) # create a file that can be opened in Excel library(\"xlsx\") # install if you do not have this package write.xlsx(genotypeDef, row.names = F, file = paste0(folder, \"/genotypeDef.xlsx\")) # create a file that can be opened in Excel genotypeDef <- read.xlsx(file = paste0(folder, \"/genotypeDef.xlsx\"), sheetIndex = 1) save(genotypeDef, file = paste0(folder, \"/genotypeDef.RData\")) genotypeScreen(folder)  load(paste0(folder, \"/genotypeDef.RData\")) genotypeDef #>   RMS1_R RMS1_S RMS5_R RMS5_S RMS3_R RMS3_S RMS4_R RMS4_S RMS2_R RMS2_S #> 1      1      1      1      1      1      1      1      1      1      1 #> 2      0      0      1      1      1      1      1      1      1      1 #> 3      1      1      0      0      1      1      1      1      1      1 #> 4      1      1      1      1      0      0      1      1      1      1 #> 5      1      1      1      1      1      1      0      0      1      1 #> 6      1      1      1      1      1      1      1      1      0      0 randomStartScreen(folder, restarts = 5)  load(paste0(folder, \"/nodestartDef.RData\")) nodestartDef #>   Strigolactone_R Inhibitor_R Feedback_R Cytokinin_R BranchOutgrowth_S #> 1          1.0000      1.0000     1.0000      1.0000            1.0000 #> 2          1.5595      0.9681     0.2286      1.2914            1.6384 #> 3          0.3068      1.3820     1.6143      1.6894            1.8513 #> 4          1.9771      0.6704     1.0885      1.0960            0.4384 #> 5          0.9526      0.1929     0.9930      0.5989            0.4613 #> 6          1.6037      1.6893     1.1424      1.7921            0.6214 #>   BudRelease_S Strigolactone_S BranchInhibitor_S Feedback_S #> 1       1.0000          1.0000            1.0000     1.0000 #> 2       1.8276          1.1447            1.2460     0.4657 #> 3       0.0760          0.9243            1.3406     1.5137 #> 4       0.8683          1.1456            0.5042     0.4706 #> 5       1.8289          0.1078            0.6614     1.2358 #> 6       0.3501          0.1684            1.0841     1.8316 #>   ShootDerivedSignal_S #> 1               1.0000 #> 2               1.5981 #> 3               1.3679 #> 4               1.4679 #> 5               1.2752 #> 6               1.1952"},{"path":"https://nicolezfortuna.github.io/PSoup/articles/02_walkthrough.html","id":"adding-an-exogenous-supply-to-a-system","dir":"Articles","previous_headings":"Simulating a set of conditions","what":"Adding an exogenous supply to a system","title":"PSoup Walkthrough","text":"addition able modify genes node values system, also possible supply external source node. external supply constantly given throughout course simulation, amount added step native value simulation. giving exogenous supply series simulations, exogenousDef object need generated saved Model folder. done, calling setupSims function, exogenousSupply argument must set TRUE like include exogenousSupply. exist automatic way create exogenousDef object. can either define object , can ‘cheat’ using nodestartDef object quickly initiate object can manipulate exogenousDef object. can done exogenousDef nodestartDef objects defining values relate nodes, therefore column names defined way. NOTE ‘exogenousDef’ object defines much supplied node. 0 means nothing added, therefore default baseline condition. starting exogenousDef object, can add rows define different conditions simulated. Specific values can modified way described genotypeDef object. possible quickly set full screen two exogenous treatments system using exogenousScreen function.","code":"# assign the first row of the nodestartDef to exogenousDef exogenousDef <- nodestartDef[1, ]  # assign the value 0 to all locations exogenousDef[1, ] <- 0  exogenousDef #>   Strigolactone_R Inhibitor_R Feedback_R Cytokinin_R BranchOutgrowth_S #> 1               0           0          0           0                 0 #>   BudRelease_S Strigolactone_S BranchInhibitor_S Feedback_S #> 1            0               0                 0          0 #>   ShootDerivedSignal_S #> 1                    0 exogenousScreen(c(\"Strigolactone_S\", \"Cytokinin_R\"),                  screen1 = 1:3,                  screen2 = 1:3,                  folder)  load(paste0(folder, \"/exogenousDef.RData\")) exogenousDef #>    Strigolactone_S Cytokinin_R #> 1                0           1 #> 2                1           1 #> 3                2           1 #> 4                3           1 #> 5                0           2 #> 6                1           2 #> 7                2           2 #> 8                3           2 #> 9                0           3 #> 10               1           3 #> 11               2           3 #> 12               3           3"},{"path":"https://nicolezfortuna.github.io/PSoup/articles/02_walkthrough.html","id":"executing-a-simulation-screen","dir":"Articles","previous_headings":"","what":"Executing a simulation screen","title":"PSoup Walkthrough","text":"Running simulation screen can done automatically using setupSims function. function pull data objects Model folder generated user, define simulations run. Users can either take combinatorial approach running simulations, can define specifically simulations run. number arguments can used specify types screens run. arguments, take logical value, set FALSE default. know looks confusing, go examples works. consequence argument defaults, base simulation explore every combination rows contained genotypeDef nodestartDef objects. , choice can made also explore every combination exogenously supplied resource well, replace curated genotypeDef object randomly generated priorDef object. Given user wants explore time, genotypeDef nodestartDef objects can restricted first (baseline) row used. chosen combination condition objects (eg genotypeDef/nodestartDef objects), default behavior PSoup simulate every combination scenarios object. However, user wants run defined set simulations, possible setting following argument; combinatorial = FALSE. case, necessary screen expressing single condition number rows index used cycle screens. Therefore, row explored screen simulated equivalent rows explored screens.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/articles/02_walkthrough.html","id":"only-exploring-the-influence-of-modifiers","dir":"Articles","previous_headings":"Executing a simulation screen","what":"Only exploring the influence of modifiers","title":"PSoup Walkthrough","text":"following simulations run based generated condition objects depicted . can start exploring behaviour genotype (modifier) values isolation. , need indicate setupSims use baseline values nodestartDef object. Loading file makes available output object contains simulations performed, including relevant information regarding conditions simulation conducted. see location Model folder information relating simulation stored can call output$modelFolder. return path directory. see general parameters applied simulations, can inspect parameters. tell much delay applied used one, maxStep value . interesting item inspect screen. summary can see contains 6 lists. 6 simulations ran. simulation can accessed using double brackets (output$screen[[index]]). simulation object contains three types information. contains scenario used run simulation, simulation , value indicates simulation achieved stability maxStep value reached. scenario information tells genotype (modifier), starting node values, exogenously supplied (exogenous supply). first screen object, every value baseline condition. simulation information show time calculations node values, case changed first simulation represents baseline condition without perturbations. Finally, stable value useful seeing stability achieved without manually checking. baseline case, stability always achieved, simulation starts stable. possible quickly check simulations output object see failed achieve stability. case, simulations reached stability. far, looked baseline conditon output much smaller. can use inspect screens within output. complicated simulations, can nice visually inspect going plot rather data frame. Lets quickly inspect outcome last simulation:  see simulation condition just plotted can call: can bit clunky, contains lot information care . reality, want know values differ baseline. function reportCondition() can help us . Depending number conditions modified, report might also become unweildy.","code":"setupSims(folder, nodestartBaseline = T) load(paste0(folder, \"/genotypeDef_Sims.RData\")) # quickly check the types of information contained within the output object summary(output) #>             Length Class  Mode      #> modelFolder 1      -none- character #> parameters  2      -none- numeric   #> screen      6      -none- list output$parameters #> maxStep   delay  #>     100       2 # quickly check the types of information contained within the first simulation object summary(output$screen[[1]]) #>            Length Class      Mode    #> scenario    3     -none-     list    #> simulation 10     data.frame list    #> stable      1     -none-     logical output$screen[[1]]$scenario #> $genotype #>   RMS1_R RMS1_S RMS5_R RMS5_S RMS3_R RMS3_S RMS4_R RMS4_S RMS2_R RMS2_S #> 1      1      1      1      1      1      1      1      1      1      1 #>  #> $startingValues #>   Strigolactone_R Inhibitor_R Feedback_R Cytokinin_R BranchOutgrowth_S #> 1               1           1          1           1                 1 #>   BudRelease_S Strigolactone_S BranchInhibitor_S Feedback_S #> 1            1               1                 1          1 #>   ShootDerivedSignal_S #> 1                    1 #>  #> $exogenousSupply #> NULL output$screen[[1]]$simulation #>   Strigolactone_R Inhibitor_R Feedback_R Cytokinin_R BranchOutgrowth_S #> 2               1           1          1           1                 1 #> 3               1           1          1           1                 1 #>   BudRelease_S Strigolactone_S BranchInhibitor_S Feedback_S #> 2            1               1                 1          1 #> 3            1               1                 1          1 #>   ShootDerivedSignal_S #> 2                    1 #> 3                    1 output$screen[[1]]$stable #> [1] TRUE # return a vector indicating if each simulation managed to reach stability stabilityVector(output) #> [1] \"All simulations reached stability.\" #> [1] TRUE TRUE TRUE TRUE TRUE TRUE # use fastPlot to quickly view the progression of a simulation fastPlot(output$screen[[6]]) output$screen[[6]]$scenario #> $genotype #>   RMS1_R RMS1_S RMS5_R RMS5_S RMS3_R RMS3_S RMS4_R RMS4_S RMS2_R RMS2_S #> 6      1      1      1      1      1      1      1      1      0      0 #>  #> $startingValues #>   Strigolactone_R Inhibitor_R Feedback_R Cytokinin_R BranchOutgrowth_S #> 1               1           1          1           1                 1 #>   BudRelease_S Strigolactone_S BranchInhibitor_S Feedback_S #> 1            1               1                 1          1 #>   ShootDerivedSignal_S #> 1                    1 #>  #> $exogenousSupply #> NULL reportCondition(output$screen[[6]]) #> $genotype #>   RMS2_R RMS2_S #> 6      0      0 #>  #> $startingValues #> NULL #>  #> $exogenousSupply #> NULL"},{"path":"https://nicolezfortuna.github.io/PSoup/articles/02_walkthrough.html","id":"only-exploring-the-influence-of-the-starting-node-values","dir":"Articles","previous_headings":"Executing a simulation screen","what":"Only exploring the influence of the starting node values","title":"PSoup Walkthrough","text":"Next can explore influence starting node values isolation. Lets quickly inspect outcome one simulations:  can see figure, even starting values system different baseline, modifier values held baseline system stabilise baseline condition.","code":"setupSims(folder, genotypeBaseline = T) load(paste0(folder, \"/nodestartDef_Sims.RData\")) reportCondition(output$screen[[2]]) #> $genotype #> NULL #>  #> $startingValues #>   Strigolactone_R Inhibitor_R Feedback_R Cytokinin_R BranchOutgrowth_S #> 2          1.5595      0.9681     0.2286      1.2914            1.6384 #>   BudRelease_S Strigolactone_S BranchInhibitor_S Feedback_S #> 2       1.8276          1.1447             1.246     0.4657 #>   ShootDerivedSignal_S #> 2               1.5981 #>  #> $exogenousSupply #> NULL  fastPlot(output$screen[[2]])"},{"path":"https://nicolezfortuna.github.io/PSoup/articles/02_walkthrough.html","id":"only-exploring-the-influence-of-an-exogenous-supply","dir":"Articles","previous_headings":"Executing a simulation screen","what":"Only exploring the influence of an exogenous supply","title":"PSoup Walkthrough","text":"want explore effects providing exogenous supply resources baseline wildtype condition, can following. Lets quickly inspect outcome one simulations:","code":"setupSims(folder, exogenousSupply = T, genotypeBaseline = T, nodestartBaseline = T) load(paste0(folder, \"/exogenousDef_Sims.RData\")) reportCondition(output$screen[[2]]) #> $genotype #> NULL #>  #> $startingValues #> NULL #>  #> $exogenousSupply #>   Cytokinin_R #> 2           1  fastPlot(output$screen[[2]])"},{"path":"https://nicolezfortuna.github.io/PSoup/articles/02_walkthrough.html","id":"exploring-modifiers-pulled-from-a-prior-distribution","dir":"Articles","previous_headings":"Executing a simulation screen","what":"Exploring modifiers pulled from a prior distribution","title":"PSoup Walkthrough","text":"final screen condition taking prior distributions modifiers, keeping possibilities baseline. Lets quickly inspect outcome one simulations:  screens involving single dimension demonstrated tutorial, possible explore multiple dimensions . Use arguments setupSims function specify objects model folder want explore.","code":"setupSims(folder, priorScreen = T, nodestartBaseline = T) load(paste0(folder, \"/priorDef_Sims.RData\")) fastPlot(output$screen[[2]])"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://nicolezfortuna.github.io/PSoup/articles/03_priorknowledge.html","id":"model-language-nodes-and-edges","dir":"Articles","previous_headings":"Language for model construction","what":"Model language: Nodes and Edges","title":"Organising Prior Knowledge","text":"Nodes edges represent beliefs regarding plants integrate information make decisions. Nodes represent kind information used plant make developmental decisions. can include internal hormones, externally sourced inputs light, nitrogen. node type expressed value relative baseline 1. Often, baseline represent wild-type plant ideal environmental conditions. Edges represent directionality influence, well influence type nodes. Edges describe plant uses information contained nodes make decisions. Nodes represented nouns represent something plant can use signal. Edges represented verbs describe influence node downstream nodes.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/articles/03_priorknowledge.html","id":"model-language-modifiers","dir":"Articles","previous_headings":"Language for model construction","what":"Model language: Modifiers","title":"Organising Prior Knowledge","text":"Modifiers act scale value specific nodes network. can represent critical genetic instructions necessary functioning specific node. Modifiers given value user act describing level expression node relative baseline (1). value modifier multiplied value node determined system inputs. Therefore, modifier value 0 function removing node network irrespective inputs received said node. context model, modifiers behave parameters define conditions simulation occurring. can considered inputs model. values modifiers remain static course simulation. contrast, nodes behave variables. values nodes expected change course simulation. simulation reaches stable state (node values unchanging), values nodes taken output simulation. network topology case model tested.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/articles/03_priorknowledge.html","id":"model-language-compartments","dir":"Articles","previous_headings":"Language for model construction","what":"Model language: Compartments","title":"Organising Prior Knowledge","text":"Compartments useful can help define locations influence network. little influence progression simulation change behaviour either nodes edges. However, useful multiple sources production node, allowing differential expression modifiers within different locations system. example, hormone Strigolactone produced root shoot plant. creating root shoot compartments, Strigolactone node can defined compartments without otherwise distinguished . PSoup automatically treat two nodes separate entities maintaining clarity user. Compartments also facilitate case modifiers differentially expressed different locations biological system. modifier attached nodes different compartments, user able specify different values compartment. useful, example, case user trying replicate conditions grafting experiment gene knocked one location .","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/articles/03_priorknowledge.html","id":"sbgn-terminology","dir":"Articles","previous_headings":"Language for model construction","what":"SBGN terminology","title":"Organising Prior Knowledge","text":"SBGN set standardised graphical languages used describe biological systems. description hypotheses restricted use terminology maps directly onto SBGN Activity Flow language. many different mechanisms biological system regulates . However, focus must limited whether influence nodes either positive negative terms outcome downstream node.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/articles/03_priorknowledge.html","id":"syntax-guide","dir":"Articles","previous_headings":"","what":"Syntax guide","title":"Organising Prior Knowledge","text":"Hypotheses (MOH), Edge Oriented Hypotheses (EOH). either case, modifier edge contextualised nodes. MOH, modifier attached node allow modifier weight strength action node. MOH always found following form: Modifiers must always indicated modifiers, otherwise can assumed nodes. modifier can attached multiple nodes. MOHs never contain edge information. EOHs express direction type influence nodes never contain modifier information. always take following form: EOH additional flexibility built can make use logical operators. Combinations nodes can specified making use operator separator list relevant nodes. use operator, indicating specified nodes must present action occur. Compartmentalising nodes network can good two reasons. first visually assist understanding different loci influence exist system. second allow possibility differential expression modifiers case modulator assigned nodes existing different compartments. useful modelling plant development different grafting conditions. Grafting involves attaching rootstock one plant, scion (shoot) another plant. allows differential expression gene within different locations plant. Compartmental information can provided adding ‘<location>’ end either MOH EOH. Example statements can seen Table 4. list considerations kept mind constructing hypotheses diagrams: interaction represented . Nodes must share edge least one node. interaction included model/diagram included list hypotheses. summarising statements likely mistakenly interpreted alternate route action. Independent inputs distinguished non-independent inputs. Non-independent inputs can indicated using word list interacting inputs. Modifiers distinguished nodes. ‘modifier’ inputs system (e.g. expression modifier can regulated nodes), ‘modifier’ expressed node attached modifier. node attached modifier can given name communicate . node necessarily stimulatory relationship nodes said modifier essential. useful instances expression gene regulated network. Statements simplified much possible effect whether levels influenced node expected go (stimulatory inhibitory). consequence modeller deciding needs intermediary node, creation new statement describing stimulatory relationship originating intermediary node. multiple sources contents node, distinguished placing different representations node different compartments. must nodes existing outside compartment. record supporting evidence behind node kept reference. help restrain network highly supported interactions (least initially). addition, make easier interrogate network case model validated biological data.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/articles/03_priorknowledge.html","id":"example-statements","dir":"Articles","previous_headings":"","what":"Example statements","title":"Organising Prior Knowledge","text":"Figure 1. example network diagram built based example hypothesis statements.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/articles/04_newtinstructions.html","id":"building-a-diagram-using-the-newt-editor","dir":"Articles","previous_headings":"","what":"Building a diagram using the Newt editor","title":"Newt Editor Instructions","text":"set hypotheses constructed, can used generate diagram given PSoup. Diagrams must constructed using SBGN-AF language readable PSoup. newteditor.org good tool construct diagram easy use entirely online. detailed guide use Newt editor, see tutorials page (Newt tutorials). section give essentials. newt editor page, click Launch newt button gain access display. first thing Newt editor specify type diagram produced. ensure illegal symbol SBGN-AF language used, warning produced. , click Map tab right screen. Type dropdown menu, select AF. Figure 1. Specify map type. correct Map type specified, open correct palette symbols Palette tab. Open Activity Flow drop , collapse options confusion. Hover curser different symbols check type . Always start building diagrams initiating compartments used. network organised within compartments, PSoup able translate diagram. adding nodes, within container node anchored container. use node symbol, click , click inside relevant compartment. position node can modified dragging . Compartments adjust size suit positioning nodes. add edge, select desired edge, click origin node drag cursor destination node releasing. add node modifier, select Macromolecule node (indicated blue square). Double click symbol insert one type time. Figure 2. Specify palette type. name change appearance object, select object, automatically open Object tab. label can provided, size changed, colours selected, label attached modifier provided Unit Information box required. objects must named, including nodes, compartments, modifiers, submaps. careful name objects, name contain spaces special characters R confuse operator. like use one word, recommended utilise either camel snake case (eg. anExample, an_example respectively). Figure 3. Modify object. can use submaps option hiding portions network complexity. Like compartment, must first add submap (existing compartment), defining nodes exist within . possible nest submaps within submaps choose. Submaps can collapsed expanded pressing – + sign within submap. submaps added diagram, Newt must prevented rearranging nodes submaps collapsed expanded. can done Map tab Arrangement dropdown. Make sure options associated complexity management unchecked. Otherwise, clarity arrangement lost. Figure 4. Network arrangement. diagram completed, can exported variety formats. format readable PSoup SBGN text file. can create selecting File -> Export -> SBGN-ML Plain. format can provided back Newt editor future modification, however lost additional colouring provided diagram. recommend .nwt version diagram kept maintain elements topological stylistic elements diagram can changed future. , export diagram NWT 0.3 file rather SBGN-ML Plain. SBGN-ML Plain diagram can always produced starting NWT 0.3 file. export image, select File -> Export Image choose image extension desired. Figure 5. Export SBGN text file.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/articles/05_algebraicrules.html","id":"default-algorithmic-rule-set","dir":"Articles","previous_headings":"","what":"Default algorithmic rule set","title":"Algebraic Rules","text":"several ‘components’ can contribute building equation. components must considered particular order build correct equation. See Table 3 different components can contribute order considered building equation. Equations necessarily need include every one components. example incoming edge information can used generate difference equation can seen Figure 1.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/articles/05_algebraicrules.html","id":"modifications-to-the-functional-forms-of-necessary-stimulants","dir":"Articles","previous_headings":"","what":"Modifications to the functional forms of necessary stimulants","title":"Algebraic Rules","text":"influence necessary stimulant defined user, applied function necessary stimulant (f(necStim)). default function simply linear. case, necessary stimulant behave modifier. Users can choose instead use form either step-like, based Michaelis-Menten dynamics. Figure 1. depiction different forms necessary stimulants can effect downstream impact. Note cases, value necessary stimulant 1, chosen form effect.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicole Fortuna. Author, maintainer. Christine Beveridge. Copyright holder, author. ARC Centre Excellence Plant Success Nature Agriculture. Funder, author.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fortuna N, Beveridge C (2024). PSoup: Package Translates Network Diagrams Mathematical Model Runs Simulations. ARC Centre Excellence Plant Success Nature Agriculture, University Queensland, Australia. https://github.com/NicoleZFortuna/PSoup.","code":"@Manual{,   title = {PSoup: A Package That Translates Network Diagrams Into A Mathematical Model And Runs Simulations},   author = {Nicole Fortuna and Christine Beveridge},   organization = {ARC Centre of Excellence for Plant Success in Nature and Agriculture},   address = {The University of Queensland, Australia},   year = {2024},   url = {https://github.com/NicoleZFortuna/PSoup}, }"},{"path":"https://nicolezfortuna.github.io/PSoup/index.html","id":"psoup","dir":"","previous_headings":"","what":"A Package That Translates Network Diagrams Into A Mathematical Model And Runs Simulations","title":"A Package That Translates Network Diagrams Into A Mathematical Model And Runs Simulations","text":"goal PSoup enable users quickly generate mathematical descriptions complex systems, can used run simulations. PSoup reads diagrammatic representations biological systems (specifically type SBGN), uses algebraic rules transform diagram set difference equations. PSoup provides support enable running simulations, well analysing resulting output. build diagram type SBGN, go Newt Pathway Viewer & Editor. see series tutorials use PSoup, go nicolezfortuna.github.io/PSoup/.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Package That Translates Network Diagrams Into A Mathematical Model And Runs Simulations","text":"can install PSoup GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"NicoleZFortuna/PSoup\")"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/Genotype-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to generate objects of class 'Genotype' — Genotype-class","title":"A function to generate objects of class 'Genotype' — Genotype-class","text":"function generate objects class 'Genotype'","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/Genotype-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A function to generate objects of class 'Genotype' — Genotype-class","text":"name name gene. used tag place influence within network. expression numeric vector names \"scion\", \"rootstock\". Numerical values set 0 (expression), 1 (full expression). default expression 1 (wildtype genotype). coregulator class character. names genotypes coregulate together. influence data.frame column names Node Influence. Influences can one either \"production\", \"degradation\", \"inhibition\", \"perception\".","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/Genotype-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to generate objects of class 'Genotype' — Genotype-class","text":"","code":"NA #> [1] NA"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/Hormone-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to generate objects of class 'Hormone' — Hormone-class","title":"A function to generate objects of class 'Hormone' — Hormone-class","text":"function generate objects class 'Hormone'","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/Hormone-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A function to generate objects of class 'Hormone' — Hormone-class","text":"name name hormone. used tag place node within network. container location action hormone. Either \"scion\", \"rootstock\". inputs data.frame column names Node, Coregulator, Influence, Delay. Influences can one either \"stimulation\", \"inhibition\", \"necessary stimulation\", \"necessary inhibition\", \"altSource\" (case hormone produced somewhere else travels location), \"Unknown\". Delay gives interval time effect delayed. outputs data.frame column names Node, Coregulator, Influence. Influences can one either \"stimulation\", \"inhibition\", \"necessary stimulation\", \"necessary inhibition\", \"altSource\" (case hormone produced somewhere else travels location), \"Unknown\". Delay gives interval time effect delayed. travel specifies hormone travels compartments. Hormones travel current container, . numeric value specifying rate travel. 0 travel compartments. Default hormones traveling 1, 0.8 reflect signals moving take longer time signals moving . degradation rate hormone degrades. genotypes vector objects class character. Lists genotypes important node.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/Hormone-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to generate objects of class 'Hormone' — Hormone-class","text":"","code":"NA #> [1] NA"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/Network-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to generate objects of class 'Network' — Network-class","title":"A function to generate objects of class 'Network' — Network-class","text":"function generate objects class 'Network'","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/Network-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A function to generate objects of class 'Network' — Network-class","text":"name name network. model list length 2 names Hormones Genotypes","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/altSourceToStimulant.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to convert altSource inputs to stimulants. — altSourceToStimulant","title":"A function to convert altSource inputs to stimulants. — altSourceToStimulant","text":"function convert altSource inputs stimulants.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/altSourceToStimulant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to convert altSource inputs to stimulants. — altSourceToStimulant","text":"","code":"altSourceToStimulant(hormones)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/altSourceToStimulant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to convert altSource inputs to stimulants. — altSourceToStimulant","text":"hormones list hormones contained network object.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/buildHormone.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to build a hormone object — buildHormone","title":"A function to build a hormone object — buildHormone","text":"Organises information correct format describe hormone","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/buildHormone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to build a hormone object — buildHormone","text":"","code":"buildHormone(nodeInfo, arcInfo, i, logicIndex, ids, nodesList, lang)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/buildHormone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to build a hormone object — buildHormone","text":"nodeInfo data.frame containing summary information nodes arcInfo data.frame containing arc information, including origins destinations external index logicIndex vector consisting indexes logical operators ids vector ids nodesList list nodes diagram lang SBGN language used construct original diagram","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/buildModel.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to generate equations from a network object — buildModel","title":"A function to generate equations from a network object — buildModel","text":"function used define script needed simulate model interest. defines genotypes network sets default 1. also initiates default starting node values 1. function also defined, provides routine needed calculate next time step simulation. folder containing output function can edited user required. folder directory need provided simulateNetwork setupSims functions input.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/buildModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to generate equations from a network object — buildModel","text":"","code":"buildModel(   network,   folder = \"./Model\",   forceOverwrite = FALSE,   altSource = FALSE,   language = \"R\",   splitCompartment = FALSE,   maxStep = 100,   steadyThreshold = 4,   ruleStyle = \"Dun\",   necStimStyle = \"Linear\",   necStimFile = NULL,   necStimMap = NULL,   saveNetwork = T,   robustnessTest = F,   altTopologyName = NULL,   exogenous = TRUE )"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/buildModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to generate equations from a network object — buildModel","text":"network object class network folder name folder want components model saved . default create directory called Model current working directory. user can provide directory folder name. language argument set \"R\", two objects: one define genotypes (genotypeDef.RData), one define starting node values (nodestartDef.RData) saved folder. addition, script define function calculate nodevalues change timestep saved (nextStep.R). language set \"C\", .h .c script generated folder. scripts need compiled locally computer able execute model. forceOverwrite default set FALSE. stop function folder already exits. Can set true want replace existing folder. case warning still thrown. altSource whether alternative sources additive inputs node. FALSE, treated just another input. language string indicates user wants model returned. default create model use R (\"R\"). Users can also choose \"C\", \"C#\". splitCompartment determines network split separate compartments maintained whole. Separation compartments done intend use L-Systems mediate communication nodes different compartments. , default set FALSE. YET FINISHED! maxStep needs specified case language set \"C/C#\". maximum value simulation allowed proceed. midpoint reached, warning returned. default value set 100. steadyThreshold needs specified case language set \"C\". number decimal places node values must equivalent considered steady state. threshold must passed nodes. default set 4. ruleStyle either \"Dun\", \"Mike\". Dun style resembles original Dun equations normalised WT conditions always 1. Mike style creates mirrored stimulatory inhibitory effects. necStimStyle multiplicative effect taken necessary stimulants. Can \"linear\" (default) saturating. saturating, can follow standard \"Michaelis-Menten\" form, \"switch-like\" form. necStimFile file directory containing function determining form multiplicative effect necessary stimulant. one form exists, argument can vector pathways. user wants use single form, nesStimMap argument must used. Default set NULL, case necStimStyle applied necessary stimulants. necStimMap one form used necessary stimulants, user must indicate form applied necessary stimulant. necessary stimulants deviate necStimStyle need indicated. indication achieve passing data.frame following columns: , , style, threshold. indicates downstream node necessary stimulant. origin node, style name functional form necessary stimulant. threshold column contains boolean values indicating presence absence threshold parameter. saveNetwork logical. Defaults TRUE. Indicates provided network object saved generated folder. robustnessTest logical. Defaults FALSE. Specifies nextStep function built part network robustness check. altTopologyName default NULL. robustnessTest = T, argument allows user keep generated alternate nextStep function specific name. name provided, alternate nextStep functions names nextStepAlt.R. exogenous default set TRUE. argument allows tailor construction model either C C#. TRUE, generated code allow exogenous supply added model.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/buildNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for building a network object — buildNetwork","title":"A function for building a network object — buildNetwork","text":"function accepts list nodes list genotypes. check objects appropriate, organise single object class network. check network make sure objects genotypes pointed , return list objects .","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/buildNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for building a network object — buildNetwork","text":"","code":"buildNetwork(hormones, genotypes, name)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/buildNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for building a network object — buildNetwork","text":"hormones list containing objects class hormone. genotypes list containing objects class hormone. name name given network","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/buildNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for building a network object — buildNetwork","text":"","code":"NA #> [1] NA"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/consistencyCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to check the internal consistency of a Network object. — consistencyCheck","title":"A function to check the internal consistency of a Network object. — consistencyCheck","text":"function checks inputs outputs nodes network make sure inputs outputs nodes agreement . addition, checks genotypes consistent coregulators, agree nodes terms regulation.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/consistencyCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to check the internal consistency of a Network object. — consistencyCheck","text":"","code":"consistencyCheck(network)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/consistencyCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to check the internal consistency of a Network object. — consistencyCheck","text":"network object class network.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/convertSBGNdiagram.html","id":null,"dir":"Reference","previous_headings":"","what":"A function that converts an SBGN-ML text file into a network object — convertSBGNdiagram","title":"A function that converts an SBGN-ML text file into a network object — convertSBGNdiagram","text":"function converts SBGN-ML text file network object","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/convertSBGNdiagram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function that converts an SBGN-ML text file into a network object — convertSBGNdiagram","text":"","code":"convertSBGNdiagram(file, networkName)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/convertSBGNdiagram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function that converts an SBGN-ML text file into a network object — convertSBGNdiagram","text":"file string. text file extension .xml containing markdown output sbgn diagram. networkName string. name wish give network.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/coregulators.html","id":null,"dir":"Reference","previous_headings":"","what":"A function that creates a string with coregulators multiplied together — coregulators","title":"A function that creates a string with coregulators multiplied together — coregulators","text":"Coregulators sorted multiplications represented . modulator given temporal modifier. Sets coregulators summed.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/coregulators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function that creates a string with coregulators multiplied together — coregulators","text":"","code":"coregulators(coreg, returnNum = FALSE, language, operator, sharp = FALSE)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/coregulators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function that creates a string with coregulators multiplied together — coregulators","text":"coreg subset inputs hormone object. subset must modulating effect, coregulators returnNum return number unique coregulator sets. Default set FALSE. language programming language equation generated ? Can either \"R\", \"C\". operator operator defines coregulator, either \"\" \"\". sharp argument used conjunction language argument. language = \"C\", provide logical value whether C# .","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/differenceString.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to build the difference equation including delays — differenceString","title":"A function to build the difference equation including delays — differenceString","text":"function build difference equation including delays","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/differenceString.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to build the difference equation including delays — differenceString","text":"","code":"differenceString(string, delays = NA, takeProduct = FALSE, language)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/differenceString.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to build the difference equation including delays — differenceString","text":"string whatever string constructed. delays vector specifying delays associated particular input. takeProduct logical. set TRUE function used collapse necessary stimulants (* instead +). Can set NULL want concatenate single string. language programming language equation generated ? Can either \"R\", \"C\".","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/exogenousScreen.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to generate all combinations of two vectors containing the values to be screened for two nodes. This function will also include the possibility of no exogenous values being provided in the form of NA. — exogenousScreen","title":"A function to generate all combinations of two vectors containing the values to be screened for two nodes. This function will also include the possibility of no exogenous values being provided in the form of NA. — exogenousScreen","text":"function generate combinations two vectors containing values screened two nodes. function also include possibility exogenous values provided form NA.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/exogenousScreen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to generate all combinations of two vectors containing the values to be screened for two nodes. This function will also include the possibility of no exogenous values being provided in the form of NA. — exogenousScreen","text":"","code":"exogenousScreen(nodes, screen1, screen2, folder)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/exogenousScreen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to generate all combinations of two vectors containing the values to be screened for two nodes. This function will also include the possibility of no exogenous values being provided in the form of NA. — exogenousScreen","text":"nodes vector containing names two nodes interest screen1 vector containing values tested first listed node. screen2 vector containing values tested second listed node. folder directory model folder save output function.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/exploreEdges.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to test how network behavior changes in response to changing the nature of edge types. — exploreEdges","title":"A function to test how network behavior changes in response to changing the nature of edge types. — exploreEdges","text":"function builds alternative network objects corresponding nextStep files. Alternate networks build one one modifying nature edges. Specifically stimulations inhibitions (necessary stimulations left ). alternate networks can basis simulations designed compare network behaviour, however feature can turned .","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/exploreEdges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to test how network behavior changes in response to changing the nature of edge types. — exploreEdges","text":"","code":"exploreEdges(   startingNetwork,   folder,   excludeEdge = NULL,   runSim = TRUE,   maxStep = 100,   steadyThreshold = 4,   ruleStyle = \"Dun\",   necStimStyle = \"Michaelis-Menten\",   necStimFile = NULL,   exogenousSupply = NULL,   priorScreen = FALSE,   saveNetwork = TRUE,   saveOutput = FALSE )"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/exploreEdges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to test how network behavior changes in response to changing the nature of edge types. — exploreEdges","text":"startingNetwork object class network describing system tested folder directory containing original nextStep function built original network excludeEdge data.frame column names Origin Destination. data.frame indicates edges want remain unchanged. Default set NULL. runSim default set TRUE. Specifies user wants automatically run simulations across alternative networks generated compare behaviour. TRUE, user must provide objects defining simulations run (eg. genotypeDef object). including nextStep.R file. can done running buildModel function original network, defining simulation conditions running function. runSim set FALSE, need run buildModel function objects starting network build function. maxStep maximum number steps want simulate . terminate simulation steady state reached, unless maxStep reached first. set NA (default), simulate stability reached. steadyThreshold number decimal places node values must equivalent considered steady state. threshold must passed nodes. ruleStyle either \"Dun\", \"Mike\". Dun style resembles original Dun equations normalised WT conditions always 1. Mike style creates mirrored stimulatory inhibitory effects. necStimStyle multiplicative effect taken necessary stimulants. Can \"linear\" (default) saturating. saturating, can follow standard \"Michaelis-Menten\" form, \"switch-like\" form. necStimFile file directory containing function determining multiplicative effect necessary stimulant. function single argument representing value necessary stimulant. file path provided, necStimStyle argument ignored. exogenousSupply specifies value node (nodes) determined outside supply. case, value node supplied user remains consistent throughout course simulation. default value argument NULL. specify nodes exogenous supply, provide named vector containing values nodes, vector member named respective node. priorScreen logical. Specifies function collect modifier values generated generated prior distributions. saveNetwork logical. Defaults TRUE. Indicates alternative network objects saved generated folder. saveOutput logical. Defaults TRUE. Indicates simulated output saved provided folder. set FALSE, outputs simulations achieved stability saved.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/fastPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"A plot to quickly inspect the progression of a simulation. — fastPlot","title":"A plot to quickly inspect the progression of a simulation. — fastPlot","text":"function designed produce high quality plots. simply quickly inspect progression simulation.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/fastPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A plot to quickly inspect the progression of a simulation. — fastPlot","text":"","code":"fastPlot(sim, logTransform = T, removeBaseline = T)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/fastPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A plot to quickly inspect the progression of a simulation. — fastPlot","text":"sim output single simulation. logTransform defaults TRUE. Indicates data log transformed. removeBaseline defualts TRUE Indicates nodes remained baseline throughout simulation removed.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/finalStates.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to pull the final states from a set of simulations. — finalStates","title":"A function to pull the final states from a set of simulations. — finalStates","text":"function pull final states set simulations.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/finalStates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to pull the final states from a set of simulations. — finalStates","text":"","code":"finalStates(simulations)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/finalStates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to pull the final states from a set of simulations. — finalStates","text":"simulations list containing output setupSims function","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/generateC.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to generate a C script which will execute a simulation of the network given a starting condition. — generateC","title":"A function to generate a C script which will execute a simulation of the network given a starting condition. — generateC","text":"function generate C script execute simulation network given starting condition.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/generateC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to generate a C script which will execute a simulation of the network given a starting condition. — generateC","text":"","code":"generateC(   network,   maxStep = 100,   steadyThreshold = 4,   folder = \"./Model\",   forceOverwrite = FALSE,   ruleStyle = \"Dun\",   necStimFunc = NULL,   sharp = FALSE,   exogenous = TRUE )"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/generateC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to generate a C script which will execute a simulation of the network given a starting condition. — generateC","text":"network object class network. maxStep maximum value simulation allowed ton proceed. midpoint reached, warning returned. default value set 0. steadyThreshold number decimal places node values must equivalent considered steady state. threshold must passed nodes. folder name folder want components model saved . default create directory called Model current working directory. user can provide directory folder name. folder generated three R scripts: one define genotypes (genotypeDef.R), one define starting node values (nodestartDef.R), one define function gives difference equations used simulate network (nextStep.R). forceOverwrite default set FALSE. stop function folder already exits. Can set true want replace existing folder. ruleStyle either \"Dun\", \"Mike\". Dun style resembles original Dun equations normalised WT conditions always 1. Mike style creates mirrored stimulatory inhibitory effects. necStimFunc name function applied necessary stimulants. default NULL, case function applied, ant therefore form linear. sharp logical. Indicates code generated C# rather C. exogenous default set TRUE. argument allows tailor construction model either C C#. TRUE, generated code allow exogenous supply added model.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/generateEdgeList.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to generate a data frame which lists all of the edges of a network. — generateEdgeList","title":"A function to generate a data frame which lists all of the edges of a network. — generateEdgeList","text":"function generate data frame lists edges network.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/generateEdgeList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to generate a data frame which lists all of the edges of a network. — generateEdgeList","text":"","code":"generateEdgeList(network, keepAltSource = F, keepNecessaryStimulant = F)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/generateEdgeList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to generate a data frame which lists all of the edges of a network. — generateEdgeList","text":"network object class Network. keepAltSource default set FALSE. Specify want recognise incoming node alternate source 'hormone' type. , alternative sources reported stimulants. keepNecessaryStimulant default set FALSE. Specify want distinguish necessary stimulants stimulants.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/generateEquation.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to generate an equation for a specific node — generateEquation","title":"A function to generate an equation for a specific node — generateEquation","text":"function generate equation specific node","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/generateEquation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to generate an equation for a specific node — generateEquation","text":"","code":"generateEquation(   node,   genotypes,   language,   ruleStyle = \"Dun\",   necStimFunc = NULL,   threshold = NULL,   sharp = FALSE,   exogenous = TRUE )"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/generateEquation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to generate an equation for a specific node — generateEquation","text":"node node within network object genotypes list genes frome within network object language programming language equation generated ? Can either \"R\", \"C\". ruleStyle either \"Dun\", \"Mike\". Dun style resembles original Dun equations normalised WT conditions always 1. Mike style creates mirrored stimulatory inhibitory effects. necStimFunc data.frame containing columns: necInput, function. name function applied indicated necessary stimulant. default NULL, case function applied necessary stimulants, therefore form linear. threshold necStimFunc threshold, argument name threshold specified . sharp argument used conjunction language argument. language = \"C\", provide logical value whether C# . exogenous logical. Specifies equation include exogenous supply term.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/generateGeneToNodeList.html","id":null,"dir":"Reference","previous_headings":"","what":"a function to map the genes that effect nodes in a network — generateGeneToNodeList","title":"a function to map the genes that effect nodes in a network — generateGeneToNodeList","text":"function map genes effect nodes network","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/generateGeneToNodeList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"a function to map the genes that effect nodes in a network — generateGeneToNodeList","text":"","code":"generateGeneToNodeList(network)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/generateGeneToNodeList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"a function to map the genes that effect nodes in a network — generateGeneToNodeList","text":"network object class network","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/genotypeScreen.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to generate genotype screens. — genotypeScreen","title":"A function to generate genotype screens. — genotypeScreen","text":"generate genotype screens considers compartmental information, allows possibility multiple types mutation.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/genotypeScreen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to generate genotype screens. — genotypeScreen","text":"","code":"genotypeScreen(   folder,   numMutations = 1,   mutationVal = 0,   returnExcel = FALSE,   graft = FALSE )"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/genotypeScreen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to generate genotype screens. — genotypeScreen","text":"folder model folder generated buildModel function. numMutations many concurrent mutations want test. mutationVal combination mutated genes, value genes take ? Default set 0 (knockout). returnExcel default set FALSE. TRUE, create excel file save model folder. file contain matrix showing genotype combinations screened. can used record existing experimental outcomes, compared simulated outcomes later . graft default set FALSE. Indicates user wants consider differential expression compartments.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/getExampleDiagram.html","id":null,"dir":"Reference","previous_headings":"","what":"a function to move the example .sbgn file into a folder of the users choice. — getExampleDiagram","title":"a function to move the example .sbgn file into a folder of the users choice. — getExampleDiagram","text":"function move example .sbgn file folder users choice.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/getExampleDiagram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"a function to move the example .sbgn file into a folder of the users choice. — getExampleDiagram","text":"","code":"getExampleDiagram(folder, ...)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/getExampleDiagram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"a function to move the example .sbgn file into a folder of the users choice. — getExampleDiagram","text":"folder folder users computer. folder exists already users computer, file moved , otherwise folder generated moving file specified location.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/getExampleDiagram.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"a function to move the example .sbgn file into a folder of the users choice. — getExampleDiagram","text":"function return TRUE file placed        requested folder. file already exists specified        location, FALSE returned.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/getSubmapNodes.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to pull out information from with in submaps — getSubmapNodes","title":"A function to pull out information from with in submaps — getSubmapNodes","text":"function pulls nodes existing within submap, well collects node information processing.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/getSubmapNodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to pull out information from with in submaps — getSubmapNodes","text":"","code":"getSubmapNodes(node, comp, newNodes = NA)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/getSubmapNodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to pull out information from with in submaps — getSubmapNodes","text":"node parent node containing submap comp compartment within submap sits newNodes carryover nodes case function used recursively (submaps within submaps)","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/langConversion.html","id":null,"dir":"Reference","previous_headings":"","what":"A data.frame containing the language conventions and their equivalence of the PSoup package, and the SBGN languages 'activity flow' and 'entity relationship'. — langConversion","title":"A data.frame containing the language conventions and their equivalence of the PSoup package, and the SBGN languages 'activity flow' and 'entity relationship'. — langConversion","text":"object class data.frame","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/langConversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A data.frame containing the language conventions and their equivalence of the PSoup package, and the SBGN languages 'activity flow' and 'entity relationship'. — langConversion","text":"","code":"langConversion"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/langConversion.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A data.frame containing the language conventions and their equivalence of the PSoup package, and the SBGN languages 'activity flow' and 'entity relationship'. — langConversion","text":"data.frame containing three rows: PSoup relationships supported PSoup AF equivalent relationship activity flow notation ER equivalent relationship entitiy relationship notation","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/languageConversion.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to convert SBGN language to PSoup language — languageConversion","title":"A function to convert SBGN language to PSoup language — languageConversion","text":"function convert SBGN language PSoup language","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/languageConversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to convert SBGN language to PSoup language — languageConversion","text":"","code":"languageConversion(influenceFrame, language)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/languageConversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to convert SBGN language to PSoup language — languageConversion","text":"influenceFrame influence column either input output slot hormone object language SBGN language style used build initial diagrammatic network","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/listGenotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to list all objects of class genotype in the current environment — listGenotypes","title":"A function to list all objects of class genotype in the current environment — listGenotypes","text":"function list objects class genotype current environment","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/listGenotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to list all objects of class genotype in the current environment — listGenotypes","text":"","code":"listGenotypes(base = T)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/listGenotypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to list all objects of class genotype in the current environment — listGenotypes","text":"base logical. Indicates whether user wants return list genotypes contained original base package. Default set true. user wants return genotypes listed main environment (genotypes built ), set parameter FALSE.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/listGenotypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to list all objects of class genotype in the current environment — listGenotypes","text":"","code":"NA #> [1] NA"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/listNodes.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to list all objects of class hormone in the current environment — listNodes","title":"A function to list all objects of class hormone in the current environment — listNodes","text":"function list objects class hormone current environment","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/listNodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to list all objects of class hormone in the current environment — listNodes","text":"","code":"listNodes(base = T)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/listNodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to list all objects of class hormone in the current environment — listNodes","text":"base logical. Indicates whether user wants return list nodes contained original base package. Default set true. user wants return nodes listed main environment (nodes built ), set parameter FALSE.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/listNodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to list all objects of class hormone in the current environment — listNodes","text":"","code":"listNodes() #> character(0)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/modifierPriorScreen.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to generate a screen of modifier conditions based on a set of prior distributions. — modifierPriorScreen","title":"A function to generate a screen of modifier conditions based on a set of prior distributions. — modifierPriorScreen","text":"function generate screen modifier conditions based set prior distributions.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/modifierPriorScreen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to generate a screen of modifier conditions based on a set of prior distributions. — modifierPriorScreen","text":"","code":"modifierPriorScreen(   folder,   priorDistribution = \"logNormal\",   n,   returnVals = FALSE,   minVal = 0,   maxVal = 2,   savePriors = T )"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/modifierPriorScreen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to generate a screen of modifier conditions based on a set of prior distributions. — modifierPriorScreen","text":"folder string stating directory folder containing generated model. priorDistribution states prior distribution used generate modifier values. length 1, prior applied modifier values. length greater 1, vector must named corresponding modifier names. specify value particular modifiers, provide value modifier instead distribution used. Available distributions either 'logNormal', 'uniform'. Default set 'logNormal'. 'uniform' chosen, must provide values minVal maxVal arguments. n number simulations set priors generated. returnVals logical. output returned user. minVal default set 0. minimum starting value node. maxVal default set 2. maximum starting value node.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/numCombn.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to calculate the number of unique combinations of a vector of length n of sample size r. — numCombn","title":"A function to calculate the number of unique combinations of a vector of length n of sample size r. — numCombn","text":"function calculate number unique combinations vector length n sample size r.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/numCombn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to calculate the number of unique combinations of a vector of length n of sample size r. — numCombn","text":"","code":"numCombn(n, r)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/numCombn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to calculate the number of unique combinations of a vector of length n of sample size r. — numCombn","text":"n number items vector. r size sample.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/peaNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Definition for the peaNetwork object. — peaNetwork","title":"Definition for the peaNetwork object. — peaNetwork","text":"object class Network","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/peaNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Definition for the peaNetwork object. — peaNetwork","text":"","code":"peaNetwork"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/peaNetwork.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Definition for the peaNetwork object. — peaNetwork","text":"list containing 4 objects: name name object expression location action coregulator coregulating genotypes influence influenced nodes","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/plot.simData.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to comparatively plot the outcomes of different simulations — plot.simData","title":"A function to comparatively plot the outcomes of different simulations — plot.simData","text":"function allows quickly plot outcome different simulations.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/plot.simData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to comparatively plot the outcomes of different simulations — plot.simData","text":"","code":"# S3 method for class 'simData' plot(data, node, bioData = NA, ...)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/plot.simData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to comparatively plot the outcomes of different simulations — plot.simData","text":"data data.frame containing outcome set simulations. first row contain wild type condition. node string showing node data plotted. bioData matrix containing biological data corresponding simulated data.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/print.Network.html","id":null,"dir":"Reference","previous_headings":"","what":"This is a function which specifies the print method for objects of class Network. — print.Network","title":"This is a function which specifies the print method for objects of class Network. — print.Network","text":"method applied automatically needing call print function.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/print.Network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is a function which specifies the print method for objects of class Network. — print.Network","text":"","code":"print.Network"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/print.Network.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"This is a function which specifies the print method for objects of class Network. — print.Network","text":"object class character length 1.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/print.Network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This is a function which specifies the print method for objects of class Network. — print.Network","text":"","code":"NA #> [1] NA"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/randomStartScreen.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to generate a number of random starting point reassignments. — randomStartScreen","title":"A function to generate a number of random starting point reassignments. — randomStartScreen","text":"Starting points generated node, pulled uniform distribution. existing starting values model folder overwritten.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/randomStartScreen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to generate a number of random starting point reassignments. — randomStartScreen","text":"","code":"randomStartScreen(folder, restarts, minVal = 0, maxVal = 2)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/randomStartScreen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to generate a number of random starting point reassignments. — randomStartScreen","text":"folder model folder generated buildModel function. restarts number randomly assigned starting points want test. minVal default set 0. minimum value node . maxVal default set 2. maximum value node .","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/report.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to produce a report of simulation progression — report","title":"A function to produce a report of simulation progression — report","text":"function produce report simulation progression","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to produce a report of simulation progression — report","text":"","code":"report(x, r)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to produce a report of simulation progression — report","text":"x index simulation completed r total number simulations completed","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/reportCondition.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to report any deviation from the baseline for simulations — reportCondition","title":"A function to report any deviation from the baseline for simulations — reportCondition","text":"function report deviation baseline simulations","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/reportCondition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to report any deviation from the baseline for simulations — reportCondition","text":"","code":"reportCondition(sims)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/reportCondition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to report any deviation from the baseline for simulations — reportCondition","text":"sims either full output list returned setupSims, case deviations full simulations returned. Otherwise, single simulation provided (form output$screen[[index]]), deviation specific simulation condition returned.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/restoreBaseModel.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to restore the base model. — restoreBaseModel","title":"A function to restore the base model. — restoreBaseModel","text":"hormone genotype objects purged environment, standard objects reloaded.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/restoreBaseModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to restore the base model. — restoreBaseModel","text":"","code":"restoreBaseModel()"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/restoreBaseModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to restore the base model. — restoreBaseModel","text":"","code":"NA #> [1] NA"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/setupSims.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper function that allows you to run simulations of a network under many different conditions. — setupSims","title":"A wrapper function that allows you to run simulations of a network under many different conditions. — setupSims","text":"function allows set variety genotype starting node conditions simulated. also allows test outcome simulations randomly assigned starting values. function make sure include one wild type condition (genotypes set 1) regardless specified user.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/setupSims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper function that allows you to run simulations of a network under many different conditions. — setupSims","text":"","code":"setupSims(   folder,   delay = 2,   maxStep = 100,   steadyThreshold = 4,   exogenousSupply = FALSE,   priorScreen = FALSE,   robustnessTest = FALSE,   genotypeBaseline = FALSE,   nodestartBaseline = FALSE,   necStimThreshold = NULL,   altTopologyName = NULL,   saveOutput = TRUE,   combinatorial = TRUE,   preventDrop = FALSE,   reduceSize = FALSE,   nCores = 1 )"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/setupSims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper function that allows you to run simulations of a network under many different conditions. — setupSims","text":"folder model folder generated buildModel function. delay amount delay delayed transport. Default set 2. maxStep maximum number timesteps simulate. steadyThreshold number decimal places node values must equivalent considered steady state. threshold must passed nodes. exogenousSupply specifies value node (nodes) determined outside supply. case, value node supplied user remains consistent throughout course simulation. default value argument FALSE. set TRUE, must exist exogenousDef object model folder. can generated exogenousScreen function. priorScreen logical. Specifies function collect modifier values generated generated prior distributions. Default set FALSE. robustnessTest logical. Defaults FALSE. Specifies nextStep function used part network robustness check. genotypeBaseline logical. Defaults FALSE. Specified first row genotype object used. selected, output object name reflect decision. genotypeBaseline = TRUE priorScreen = TRUE, warning thrown user priorScreen argument take precedence. nodestartBaseline logical. Defaults FALSE. Specified first row nodestart object used. selected, output object name reflect decision. necStimThreshold form necessary stimulant contains threshold, user must indicate said threshold form threshold applied. indication achieved passing data.frame following columns: , , style, threshold. indicates downstream node necessary stimulant. origin node, style name functional form necessary stimulant. threshold column contains values threshold parameter. Information needs provided cases threshold applies. altTopologyName default NULL. robustnessTest = TRUE, argument allows user keep generated alternate nextStep function specific name. name provided, alternate nextStep functions names nextStepAlt.R. saveOutput logical. Default set TRUE. Indicates output simulation screen automatically saved provided folder location upon completion. combinatorial logical. States setupSims simulate every combination conditions explored. set TRUE, every row set explored conditions simulated rows every explored conditions (explored conditions relating data.frame specified setupSims explore). set FALSE, expected data.frames conditions passed setupSims number rows. case, row paired equivalent row data.frame. argument set FALSE, user make sure appropriate control conditions exist. preventDrop logical. Allows user override setupSims dropping repeated conditions. also prevent reorganisation conditions clarity. Default set FALSE. reduceSize logical. Default set FALSE. argument used minimise size simulation output. set TRUE, final values simulation returned simulation reached stability. simulation able reach stability, full output simulation returned. nCores number cores used run simulations. default set 1, case simulations run sequentially singe core. greater 1, simulations run parallel across number cores indicated. can check number cores system function detectCores() parallel package. recommended maximum number cores chose lease one less number returned detectCores().","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/simulateNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to simulate a network — simulateNetwork","title":"A function to simulate a network — simulateNetwork","text":"Takes output folder buildNetwork function uses run network simulation. simulation run steady state achieved unless otherwise specified. steady state considered reached node values considered equivelant previous timestep threshold decimal places.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/simulateNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to simulate a network — simulateNetwork","text":"","code":"simulateNetwork(   folder,   delay = 2,   maxStep = NA,   genotype = NA,   startingValues = NA,   steadyThreshold = 4,   exogenousSupply = FALSE,   necStimThreshold = NULL,   robustnessTest = FALSE,   altTopologyName = NULL,   reduceSize = FALSE )"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/simulateNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to simulate a network — simulateNetwork","text":"folder directory folder generated buildModel function. delay amount delay apply delayed action nodes. default set 2. maxStep maximum number steps want simulate . terminate simulation steady state reached, unless maxStep reached first. set NA (default), simulate stability reached. genotype default set NA. Allows user provide different genotypeDef data.frame one specified provided file. startingValues default set NA. Allows user provide different nodestartDef data.frame one specified provided file. steadyThreshold number decimal places node values must equivalent considered steady state. threshold must passed nodes. exogenousSupply specifies value node (nodes) determined outside supply. case, value node supplied user remains consistent throughout course simulation. default value argument FALSE. set TRUE, must exist exogenousDef object model folder. can generated exogenousScreen function. necStimThreshold form necessary stimulant contains threshold, user must indicate said threshold form threshold applied. indication achieved passing data.frame following columns: , , style, threshold. indicates downstream node necessary stimulant. origin node, style name functional form necessary stimulant. threshold column contains values threshold parameter. Information needs provided cases threshold applies. robustnessTest logical. Defaults FALSE. Specifies nextStep function used part network robustness check. altTopologyName default NULL. robustnessTest =TRUE, argument allows user keep generated alternate nextStep function specific name. name provided, alternate nextStep functions names nextStepAlt.R. reduceSize logical. Default set FALSE. argument used minimise size simulation output. set TRUE, final values simulation returned simulation reached stability. simulation able reach stability, full output simulation returned.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/simulateNetwork.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"A function to simulate a network — simulateNetwork","text":"function can used output buildModel function             generated language argument set \"R\".","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/stabilityVector.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to create a vector that reports whether simulations have managed to reach stability by the maximum timestep. — stabilityVector","title":"A function to create a vector that reports whether simulations have managed to reach stability by the maximum timestep. — stabilityVector","text":"function create vector reports whether simulations managed reach stability maximum timestep.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/stabilityVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to create a vector that reports whether simulations have managed to reach stability by the maximum timestep. — stabilityVector","text":"","code":"stabilityVector(allSim)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/stabilityVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to create a vector that reports whether simulations have managed to reach stability by the maximum timestep. — stabilityVector","text":"allSim output list setupSims","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/tidyScreen.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to make sure that data.frames containing conditions to screen are organised correctly. The wild-type condition is made to come first, and any duplicate rows are removed. — tidyScreen","title":"A function to make sure that data.frames containing conditions to screen are organised correctly. The wild-type condition is made to come first, and any duplicate rows are removed. — tidyScreen","text":"function make sure data.frames containing conditions screen organised correctly. wild-type condition made come first, duplicate rows removed.","code":""},{"path":"https://nicolezfortuna.github.io/PSoup/reference/tidyScreen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to make sure that data.frames containing conditions to screen are organised correctly. The wild-type condition is made to come first, and any duplicate rows are removed. — tidyScreen","text":"","code":"tidyScreen(frame, name, exogenous = FALSE)"},{"path":"https://nicolezfortuna.github.io/PSoup/reference/tidyScreen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to make sure that data.frames containing conditions to screen are organised correctly. The wild-type condition is made to come first, and any duplicate rows are removed. — tidyScreen","text":"frame data.frame name string giving name data frame case warning generated. exogenous logical. Indicates wild type row 1s 0s. checking modifier node screens, set F. checking exogenous screens, T.","code":""}]
